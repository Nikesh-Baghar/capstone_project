{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f288c5c7-d66c-47be-84c4-83c37444fd07",
   "metadata": {},
   "outputs": [],
   "source": [
    "# streamlit_app.py\n",
    "import streamlit as st\n",
    "from transformers import AutoModelForCausalLM, AutoTokenizer, pipeline\n",
    "import torch\n",
    "\n",
    "# -----------------------------\n",
    "# Model Configurations\n",
    "# -----------------------------\n",
    "MODELS = {\n",
    "    \"MistralLite\": \"amazon/MistralLite\",\n",
    "    \"GPT-Neo (125M)\": \"EleutherAI/gpt-neo-125M\",\n",
    "    \"GPT-2\": \"openai-community/gpt2\",\n",
    "    \"Qwen-0.6B\": \"Qwen/Qwen3-0.6B\"\n",
    "}\n",
    "\n",
    "# -----------------------------\n",
    "# Load model and tokenizer\n",
    "# -----------------------------\n",
    "@st.cache_resource\n",
    "def load_model(model_name):\n",
    "    tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
    "    model = AutoModelForCausalLM.from_pretrained(\n",
    "        model_name,\n",
    "        torch_dtype=\"auto\",\n",
    "        device_map=\"auto\"\n",
    "    )\n",
    "    return tokenizer, model\n",
    "\n",
    "# -----------------------------\n",
    "# Generation Function\n",
    "# -----------------------------\n",
    "def generate_response(tokenizer, model, prompt, strategy=\"greedy\",\n",
    "                      temperature=0.7, top_k=20, top_p=0.85, max_new_tokens=800):\n",
    "\n",
    "    gen_kwargs = {\"max_new_tokens\": max_new_tokens, \"temperature\": temperature}\n",
    "\n",
    "    if strategy == \"greedy\":\n",
    "        gen_kwargs.update({\"do_sample\": False})\n",
    "    elif strategy == \"beam\":\n",
    "        gen_kwargs.update({\"num_beams\": 5, \"do_sample\": False})\n",
    "    elif strategy == \"top-k\":\n",
    "        gen_kwargs.update({\"do_sample\": True, \"top_k\": top_k})\n",
    "    elif strategy == \"top-p\":\n",
    "        gen_kwargs.update({\"do_sample\": True, \"top_p\": top_p})\n",
    "    else:\n",
    "        raise ValueError(\"Choose from: greedy, beam, top-k, top-p\")\n",
    "\n",
    "    # Handle Qwen (chat template)\n",
    "    if \"Qwen\" in model.name_or_path and hasattr(tokenizer, \"apply_chat_template\"):\n",
    "        messages = [{\"role\": \"user\", \"content\": prompt}]\n",
    "        text = tokenizer.apply_chat_template(\n",
    "            messages, tokenize=False, add_generation_prompt=True, enable_thinking=False\n",
    "        )\n",
    "        inputs = tokenizer([text], return_tensors=\"pt\").to(model.device)\n",
    "    else:\n",
    "        inputs = tokenizer(prompt, return_tensors=\"pt\").to(model.device)\n",
    "\n",
    "    outputs = model.generate(**inputs, **gen_kwargs)\n",
    "    result = tokenizer.decode(outputs[0][len(inputs.input_ids[0]):], skip_special_tokens=True)\n",
    "    return result.strip()\n",
    "\n",
    "# -----------------------------\n",
    "# Streamlit UI\n",
    "# -----------------------------\n",
    "st.title(\"LLM Response Comparator\")\n",
    "\n",
    "# User selections\n",
    "model_choice = st.selectbox(\"Select a model:\", list(MODELS.keys()))\n",
    "strategy = st.selectbox(\"Select decoding strategy:\", [\"greedy\", \"beam\", \"top-k\", \"top-p\"])\n",
    "prompt = st.text_area(\"Enter your prompt:\", \"Write a 500-word essay on the future of AI.\")\n",
    "\n",
    "temperature = st.slider(\"Temperature\", 0.0, 2.0, 1.0, 0.1, 0.5, 0.7, 0.9)\n",
    "max_new_tokens = st.slider(\"Max New Tokens\", 50, 800,2048, 500, 50)\n",
    "\n",
    "if st.button(\"Generate\"):\n",
    "    tokenizer, model = load_model(MODELS[model_choice])\n",
    "    with st.spinner(\"Generating response...\"):\n",
    "        response = generate_response(\n",
    "            tokenizer, model, prompt, strategy=strategy,\n",
    "            temperature=temperature, max_new_tokens=max_new_tokens\n",
    "        )\n",
    "    st.subheader(\"Generated Response\")\n",
    "    st.write(response)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
